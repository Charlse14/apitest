{"version":3,"sources":["components/Button.js","containers/Space.js","components/Fact.js","containers/NumberMagic.js","components/Head.js","App.js","serviceWorker.js","index.js"],"names":["Button","click","str","x","className","onClick","Space","onRefresh","fetch","then","res","json","setState","latitude","iss_position","longitude","state","alt","src","this","Component","Fact","story","NumberMagic","onInputChange","event","input","target","value","onSubmit","length","text","type","placeholder","onChange","Head","App","screen","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iMAYeA,EATA,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,IAAc,IAATC,SAAS,MAAP,EAAO,EAErC,OACE,4BAAQC,UAFE,CAAE,aAAc,aAEHD,GAAIE,QAASJ,GAClCC,ICwCUI,E,kDA1Cd,aAAc,IAAD,8BACZ,gBAQDC,UAAU,WACTC,MAAM,2CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACL,EAAKE,SAAS,CAACC,SAAWH,EAAII,aAAaD,SACxCE,UAAWL,EAAII,aAAaC,gBAXhC,EAAKC,MAAQ,CACZH,SAAS,EACTE,UAAU,GALC,E,qDAoBZ,OACC,yBAAKX,UAAU,SACd,wBAAIA,UAAU,iBAAd,gDAEA,uBAAGA,UAAU,eAAb,iKAIA,yBAAKA,UAAU,kBACd,yBAAKA,UAAU,aAAaa,IAAI,gBAAgBC,IAAI,oHAGrD,yBAAKd,UAAU,iBACd,kBAAC,EAAD,CAAQH,MAAOkB,KAAKZ,UAAWL,IAAK,SAAUC,EAAG,IACjD,wCAAcgB,KAAKH,MAAMH,UACzB,yCAAeM,KAAKH,MAAMD,iB,GArCXK,aCQLC,EARF,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACd,OACC,yBAAKlB,UAAU,QACbkB,ICoCWC,E,kDApCd,aAAc,IAAD,8BACZ,gBAQDC,cAAc,SAACC,GACd,EAAKb,SAAS,CAACc,MAAMD,EAAME,OAAOC,SAVtB,EAabC,SAAS,WACI,EAAKb,MAAMU,MAChBI,QACNtB,MAAM,yBAAD,OAA0B,EAAKQ,MAAMU,QACzCjB,MAAK,SAAAC,GAAG,OAAIA,EAAIqB,UAChBtB,MAAK,SAAAC,GAAG,OAAI,EAAKE,SAAS,CAACU,MAAMZ,QAfnC,EAAKM,MAAQ,CACZU,MAAM,GACNJ,MAAM,IALK,E,qDAwBZ,OACC,yBAAKlB,UAAU,SACd,wBAAIA,UAAU,kBAAd,2CACA,uBAAGA,UAAU,eAAb,uEACA,2BAAOA,UAAU,eAAe4B,KAAK,OAAOC,YAAY,2BAA2BC,SAAUf,KAAKK,gBAClG,kBAAC,EAAD,CAAQvB,MAAOkB,KAAKU,SAAU3B,IAAK,SAAUC,EAAG,IAChD,kBAAC,EAAD,CAAMmB,MAAOH,KAAKH,MAAMM,a,GAhCFF,aCOXe,EARF,WACZ,OACC,yBAAK/B,UAAU,QACd,6CCoBYgC,E,kDAnBb,aAAc,IAAD,8BACX,gBACKpB,MAAQ,CACXqB,OAAO,GAHE,E,qDAQX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAdUjB,aCOEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1618eb9e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Button = ({click, str, x=0}) => {\r\n\tconst stl = [ 'btn-simple', 'btn-round'];\r\n\treturn( \r\n\t\t\t<button className={stl[x]} onClick={click}>\r\n\t\t\t\t{str}\r\n\t\t\t</button>\r\n\t);\r\n}\r\n\r\nexport default Button;","import React, {Component} from 'react';\r\nimport Button from '../components/Button';\r\n\r\nclass Space extends Component {\r\n\r\n\tconstructor(){\r\n\t\tsuper();\r\n\r\n\t\tthis.state = {\r\n\t\t\tlatitude:0,\r\n\t\t\tlongitude:0\r\n\t\t}\r\n\t}\r\n\r\n\tonRefresh=()=>{\r\n\t\tfetch('http://api.open-notify.org/iss-now.json')\r\n\t\t.then(res => res.json())\r\n\t\t.then(res => {\r\n\t\t\tthis.setState({latitude : res.iss_position.latitude,\r\n\t\t\t\t\t\tlongitude: res.iss_position.longitude\r\n\t\t\t})\r\n\t\t});\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className=\"space\">\r\n\t\t\t\t<h1 className=\"space__header\">International Space Station Current Location</h1>\r\n\r\n\t\t\t\t<p className=\"space__para\">The International Space Station is moving at close to 28,000 km/h \r\n\t\t\t\tso its location changes really fast! \r\n\t\t\t\tSo press the below button to see the current position.</p>\r\n\r\n\t\t\t\t<div className=\"space__img-box\">\r\n\t\t\t\t\t<img className=\"space__img\" alt=\"space station\" src=\"https://wallpaper-mania.com/wp-content/uploads/2018/09/High_resolution_wallpaper_background_ID_77701921822.jpg\" />\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"space__result\">\r\n\t\t\t\t\t<Button click={this.onRefresh} str={'locate'} x={1}/>\r\n\t\t\t\t\t<p>Latitude: {this.state.latitude}</p>\r\n\t\t\t\t\t<p>Longitude: {this.state.longitude}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Space;","import React from 'react';\r\n\r\n\r\nconst Fact = ({story}) => {\r\n\treturn( \r\n\t\t<div className=\"fact\">\r\n\t\t\t{story}\r\n\t\t</div>\t\r\n\t);\r\n}\r\n\r\nexport default Fact;","import React, {Component} from 'react';\r\nimport Button from '../components/Button';\r\nimport Fact from '../components/Fact';\r\n\r\nclass NumberMagic extends Component {\r\n\r\n\tconstructor(){\r\n\t\tsuper();\r\n\r\n\t\tthis.state = {\r\n\t\t\tinput:'',\r\n\t\t\tstory:''\r\n\t\t}\r\n\t}\r\n\r\n\tonInputChange=(event)=>{\r\n\t\tthis.setState({input:event.target.value})\r\n\t}\r\n\r\n\tonSubmit=()=>{\r\n\t\tconst str = this.state.input;\r\n\t\tif(str.length){\r\n\t\t\tfetch(`http://numbersapi.com/${this.state.input}`)\r\n\t\t\t.then(res => res.text())\r\n\t\t\t.then(res => this.setState({story:res}));\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div className=\"story\">\r\n\t\t\t\t<h1 className=\"story__heading\">Each Number has a story. Want to know ?</h1>\r\n\t\t\t\t<p className=\"story__para\">You have to enter a number or a date in month/day(e.g 5/11) formate</p>\r\n\t\t\t\t<input className=\"story__input\" type=\"text\" placeholder=\"Number or Date(e.g 5/11)\" onChange={this.onInputChange} />\r\n\t\t\t\t<Button click={this.onSubmit} str={'Submit'} x={0}/>\r\n\t\t\t\t<Fact story={this.state.story}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default NumberMagic;","import React from 'react';\r\n\r\n\r\nconst Head = () => {\r\n\treturn( \r\n\t\t<div className=\"head\">\r\n\t\t\t<h1> cool  api </h1>\r\n\t\t</div>\t\r\n\t);\r\n}\r\n\r\nexport default Head;","import React, {Component} from 'react';\nimport Space from './containers/Space';\nimport NumberMagic from './containers/NumberMagic';\nimport Head from './components/Head';\n\nclass App extends Component{\n\n  constructor(){\n    super()\n    this.state = {\n      screen:1\n    }\n  }\n\n  render(){\n    return (\n      <div>\n        <Head/>\n        <Space/>\n        <NumberMagic/>\n      </div>\n    );\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}